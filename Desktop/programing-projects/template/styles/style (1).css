:root {
  --blue: #aca;
  --white: #fff;
}

* {
  box-sizing: border-box;
  text-decoration: none;
  display: inline-block;
  margin: 10px;
}

body {
  background-color: var(--blue);
}

/* Always Design for Mobile First */

/* CSS Frameworks W3.CSS, Bootstrap & Tailwind */

@media screen and (min-width: 768px) {

  .row,
  .navbar {
    flex-direction: column;
    font-size: 14px;
  }

  @media screen and (min-width: 1200px) {

    .row,
    .navbar {
      flex-direction: column;
    }



    /* Extra small devices (phones, 600px and down) */
    @media only screen and (max-width: 600px) {
      ...
    }

    /* Small devices (portrait tablets and large phones, 600px and up) */
    @media only screen and (min-width: 600px) {
      ...
    }

    /* Medium devices (landscape tablets, 768px and up) */
    @media only screen and (min-width: 768px) {
      ...
    }

    /* Large devices (laptops/desktops, 992px and up) */
    @media only screen and (min-width: 992px) {
      ...
    }

    /* Extra large devices (large laptops and desktops, 1200px and up) */
    @media only screen and (min-width: 1200px) {
      ...
    }

    /* 480px (smartphones), 768px (tablets), and 1200px (desktops) are the most commonly used */

    /* Add fallback fonts and check if font is supported on different browsers */

    /* Add font superfamilies */

    /*use px when you want the size to be fixed and
use rem / em when you want the size to be adaptive/dynamic to the size of the system. (Maybe vw?) */

    /* master CSS Pseudo classes/elements and transition */

    /* Learn CSS animation w/ keyframes for sick design */

    /* Flexbox */

    /* Using a grid-view is very helpful when designing web pages. It makes it easier to place elements on the page. */

    /* Sass & Less created before var() functions. Not really necessary, but nesting can make css code easier to read and understand */